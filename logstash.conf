input {
  udp {
    port  => 5000
    codec => json
    add_field => { "[agent][type]" => "logspout" }
  }
  tcp {
    port  => 5000
    codec => json
    add_field => { "[agent][type]" => "logspout" }
  }
  beats {
    port => 5044
  }
}

filter {

  # Handle logs from beats
  if [agent][type] in ["metricbeat", "auditbeat"] {
    mutate {
      add_field => { "[@metadata][target_index]" => "%{[agent][type]}-%{[event][dataset]}" }
    }
    mutate {
      # the [event][dataset] contains a period, replace it with a normaltive character
      gsub => [ "[@metadata][target_index]", "[.]", "-" ]
    }
  }
  # End beats

  # Handle logs from logspout
  if [agent][type] == "logspout" {
    # if role is loggen
    if [docker][image] {
      # Pull FOI out of the "docker" nested object
      mutate {
        add_field => {
          "type" => "%{[docker][image]}"
          "container" => "%{[docker][name]}"
        }
      }

      # Prettify the values
      mutate {
        gsub => [
          # image-name:tag => image-name
          "type", ":.*", "",
          # /container-name => container-name
          "container", "^/", ""
        ]
      }

      # Parse specific style of python default logs
      if [type] in ["loggen", "somethingelse"] {
        grok {
          match => [ "message", "%{LOGLEVEL:level}:%{DATA:module}:%{GREEDYDATA:xmessage}"]
        }
        mutate {
          rename => { 'xmessage' => 'message' }
        }
        # Cleanup multi-line trace marks
        if [level] in ["ERROR", "error"] {
          mutate {
            gsub => [ "message", "TRACE:", "" ]
          }
        }
        # Uncomment to ignore while testing
        # drop {}
      }

      # Handle the default log-format from the NGINX docker container
      if [type] == 'nginx' {
        grok {
          # 10.0.7.4 - - [18/Jul/2020:17:12:06 +0000] "GET / HTTP/1.1" 200 612 "-" "python-requests/2.24.0" "-"
          match => { "message" => "%{IP:remote_addr} - - \[%{HTTPDATE:timestamp}\] \"%{WORD:method} %{NOTSPACE:url} %{DATA}\" %{NUMBER:status} (%{NUMBER:body_bytes_sent}|-) %{QS:http_referer} %{QS:http_user_agent} %{QS:http_x_forwarded_for}" }
          remove_tag => ["_grokparsefailure"]
          remove_field => ["message"]
        }
        mutate {
          # Unquote fields
          gsub =>  [
            "http_referer", "\"", "",
            "http_user_agent", "\"", "",
            "http_x_forwarded_for", "\"", ""
          ]
        }
      }
    }

    # Drop unecessary docker fields
    mutate {
      remove_field => [ "docker" ]
    }

    # Add metadata for target index
    if [type] {
      mutate { add_field => { "[@metadata][target_index]" => "%{[type]}" } }
    } else {
      mutate { add_field => { "[@metadata][target_index]" => "misc" } }
    }
  }
  # End docker
}

output {
  stdout { codec => rubydebug }
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    # Make all index daily
    index => "%{[@metadata][target_index]}-%{+YYYY.MM.dd}"
  }
}
